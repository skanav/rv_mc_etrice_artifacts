RoomModel room.basic.service.logging {

	import room.basic.types.* from "Types.room"

	ActorClass ALogService {
		Interface {
			SPP log: Log
		}
		Structure {
			usercode1 '''
				import java.io.*;
				import java.util.*;'''
			usercode2 '''
				FileOutputStream file = null;
				PrintStream p = null;
				static long tStart = System.currentTimeMillis();'''
			ServiceImplementation of log
		}
		Behavior {
			Operation destroyUser() '''
				if (p!= null) {
				p.flush();
				p.close();
				p=null;
				}'''
			StateMachine {
				Transition init: initial -> closed {
				}
				Transition open: closed -> opened {
					triggers {
						<open: log>
					}
					action '''
						Date d=new Date(tStart);
						try{
						file=new FileOutputStream(transitionData);
						p=new PrintStream(file);
						p.println("Log opened at "+ d.toString());
						p.println("--------------------------------------------------");
						} catch (Exception e){
						System.out.println("Log file not opened !");
						}'''
				}
				Transition tr0: opened -> closed {
					triggers {
						<close: log>
					}
					action '''
						p.flush();
						p.close();
						p=null;'''
				}
				Transition tr1: opened -> opened {
					triggers {
						<internalLog: log>
					}
					action '''
						p.println("Timestamp: " + Long.toString(transitionData.timeStamp-tStart) + "ms");
						p.println("SenderInstance: "+ transitionData.sender);
						p.println("UserString: " + transitionData.userString);
						p.println("--------------------------------------------------");
						System.out.printf(transitionData.userString);'''
				}
				State closed
				State opened
			}
		}
	}

	ProtocolClass Log {
		usercode2 '''
			public static final int LOG_LEVEL_LOW = 1;
			public static final int LOG_LEVEL_MEDIUM = 2;
			public static final int LOG_LEVEL_HIGH = 3;'''
		incoming {
			Message open(string)
			Message close()
			private Message internalLog(InternalLogData)
		}

		conjugated PortClass
		{
			usercode '''
				static int logLevel=0;
				InternalLogData d = new InternalLogData();'''
			Operation setLogLevel(l: int32) '''
				logLevel=l;
				if (logLevel > LOG_LEVEL_HIGH) logLevel=LOG_LEVEL_HIGH;'''
			Operation log(logLevel: int32, userString: string) sends internalLog '''
				if (logLevel>LogConjPort.logLevel){
				d.userString=userString;
				d.timeStamp=System.currentTimeMillis();
				d.sender=getInstancePath();
				if (getPeerAddress()!=null)
				getPeerMsgReceiver().receive(new EventWithDataMessage(getPeerAddress(), IN_internalLog, d.deepCopy()));
				}'''
		}
	}

	DataClass InternalLogData {
		Attribute userString: string
		Attribute sender: string
		Attribute timeStamp: int64
	}
}